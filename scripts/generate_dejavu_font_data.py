#!/usr/bin/env python3
"""Utility to embed DejaVu Sans fonts as compressed Base64 constants.

This script reads the DejaVu Sans regular and bold TrueType font files,
compresses them with gzip, encodes them as Base64, and writes the encoded
data into ``app/assets/dejavu_sans_data.py``. The resulting module exposes
``DEJAVU_SANS_REGULAR`` and ``DEJAVU_SANS_BOLD`` constants containing the
compressed payloads.

Usage example::

    python scripts/generate_dejavu_font_data.py \
        --regular /usr/share/fonts/truetype/dejavu/DejaVuSans.ttf \
        --bold /usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf

By default the script uses the system ``fonts-dejavu`` paths above when
available. Adjust the ``--regular``/``--bold`` arguments if the fonts live in a
custom location (e.g. downloaded from upstream).
"""

from __future__ import annotations

import argparse
import base64
import gzip
import textwrap
from pathlib import Path

DEFAULT_REGULAR = Path("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf")
DEFAULT_BOLD = Path("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf")
TARGET_MODULE = Path("app/assets/dejavu_sans_data.py")


def _encode_font(path: Path) -> str:
    data = path.read_bytes()
    compressed = gzip.compress(data, compresslevel=9)
    encoded = base64.b64encode(compressed).decode("ascii")
    return "\n".join(textwrap.wrap(encoded, 76))


def _render_constant(name: str, payload: str) -> str:
    return "\n".join([
        f"{name} = \"\"\"",
        payload,
        "\"\"\"",
    ])


def _render_module(regular_b64: str, bold_b64: str) -> str:
    header = "\n".join(
        [
            '"""Base64 encoded DejaVu Sans font payloads.',
            "",
            "This module is auto-generated by",
            "``scripts/generate_dejavu_font_data.py``.",
            "The font data is gzip-compressed before Base64 encoding",
            "for smaller string constants.",
            '"""',
            "",
            "from __future__ import annotations",
            "",
        ]
    )
    parts = [
        header,
        _render_constant("DEJAVU_SANS_REGULAR", regular_b64),
        "",
        _render_constant("DEJAVU_SANS_BOLD", bold_b64),
    ]
    return "\n".join(parts)


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--regular", type=Path, default=DEFAULT_REGULAR)
    parser.add_argument("--bold", type=Path, default=DEFAULT_BOLD)
    parser.add_argument("--output", type=Path, default=TARGET_MODULE)
    args = parser.parse_args()

    if not args.regular.exists():
        raise SystemExit(f"Regular font not found: {args.regular}")
    if not args.bold.exists():
        raise SystemExit(f"Bold font not found: {args.bold}")

    regular_b64 = _encode_font(args.regular)
    bold_b64 = _encode_font(args.bold)

    module_content = _render_module(regular_b64, bold_b64)
    args.output.write_text(module_content + "\n", encoding="utf-8")
    print(f"Wrote {args.output}")


if __name__ == "__main__":
    main()
